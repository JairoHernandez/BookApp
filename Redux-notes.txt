------Reducers------

A reducer is a function that returns a piece of the application state.
Because our application can have many different pieces of state we can have many different reducers.

BOOK app

    Application State(big object) - Generated by Reducers
        1 reducer responsible for 'List of Books' -- Books Reducer
        1 reducer for 'Currently Selected Book' -- ActiveBook Reduder
    
    Each key(books, activeBook) in the application object is a state(aka piece of state).

    {
        books: [{title: 'Harry Potter'}, {title: 'Javascript'}], // books piece of state is produced by Books Reducer
        activeBook: {title: 'Javascript: The Good Parts'} // activeBook piece of state is produced by ActiveBook Reducer
    }

    Each value is a Reducer that changes its of the state(key).
    The reducer is a function that returns a value.

------Containers - Connecting Redux to React------

Test that are generating useable state.
react-redux library connects React with Redux. It's already in our package.json boiler plate.

A container is a react component with a direct connection to the state managed by redux.
It's the middle box in the diagram.

    Offial Redux docs say when React compoment has no conneciton to redux it's called dumb
    component. When there is a connection to Redux it's called a smart component.

------Containers Continued------  
Which component do we want to turn into a container?
    
    It varies. In general we want the most parent component that cares about a particular 
    piece of state to be a component.
        - Top level App should be a dumb component, thus NOT a Container because it does not touch
        the data inside of Redux.
        - BookList and BookDetail should both be Containers(aka smart components) because it 
        touches and cares about the Redux data(aka pieces of state).

ONLY THE MOST PARENT COMPONENT THAT USES A SPECIFIC PIECE OF STATE NEEDS TO BE CONNECTED TO REDUX!
Because of this we promoted book-list.js to be a Container.